Angular connects a view with a module by using ng-app. Whatever value that is provided there is matched to a module name.
The one with the match owns the view.

Controller is nested within an app. When you specify a controller ng-controller, then it tries to match it to a controller that's within the app.
View is the HTML part and the model is the Javascript part that connects with it. Angular will keep the model and view bound.

Everything in JS can have a toString used on them, which is the written code as a string.

Dependency injection - pass object into method instead of creating it inside the method.
How Angular does DI:
Angular has an object created, that has an injector. It parses the function and returns an array of the method parameters as strings.
If a function contains a certain name, then Angular sees that name and says that I know that name and injects it to where it sees the name.
This means that all you have to do is put the name in correctly and it'll match it.
angular.injector().annotate(our function).

Interpolation - creating a string by combining strings and placeholders.

$scope connects what's going on with the controller and the view. Whatever variable you put in it, you can access in the view.
Don't have to use $scope.myMessage, because when you use {{ myMessage }} it is assumed that the variable is inside the $scope.

Directive - an instruction to AngularJS to manipulate a piece of the DOM.

Javascript has an event loop. Events are constantly happening, just have to add a listener to listen to them.
AngularJS automatically adds listeners to events. Every time you bind, a watcher is added by Angular to check if the value changes.
Angular updates everything in the DOM that's connected by the variable if the variable changes. It updates until the old and new values are the same.

Directives can be put wherever you want. There are quite a bit of directives - click, if, repeat, button down etc. Documentation shows it all.
ng-cloak hides an element in the DOM until AngularJS has worked on it.

In href a #whatever is a fragment identifier. It jumps to a part of the DOM, a fragment, that's identified with the text(id=whatever).
Anything after the # in the URL is just a string. You could set it to say #/whatever/3 and pretend that it's an URL.
You could catch the event with hashchange and if-else based on the hash value to pretend there are multiple pages.

ng-view determines where the newly loaded page will be dropped into.

Everything but $scope is a singleton in AngularJS.

AngularJS normalizes variable names between Javascript and HTML. result-link-href becomes resultLinkHref in JS.